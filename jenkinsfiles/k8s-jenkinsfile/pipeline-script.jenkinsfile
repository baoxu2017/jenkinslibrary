pipeline {
  environment {
    REGISTRY='registry.cn-shenzhen.aliyuncs.com/willspace/spring-demo'
    VERSION = "${env.BUILD_ID}"
    REGISTRY_CREDENTIAL = 'aliyun'
  }    
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  containers:
  - name: maven
    image: 192.168.93.9:8081/library/maven:mirror
    args:
    - cat
    tty: true
  - name: docker
    image: docker:dind
    args:
    - "--registry-mirror=https://uyah70su.mirror.aliyuncs.com"
    securityContext:
      privileged: true
    tty: true
  - name: kubectl
    image: lachlanevenson/k8s-kubectl
    command:
    - cat
    tty: true
  - name: helm
    image: lachlanevenson/k8s-helm
    command:
    - cat
    tty: true

"""
    }
  }
  stages {
      
    stage('SCM Checkout') {
        steps {
            git branch: "master", credentialsId: 'github', url: 'https://github.com.cnpmjs.org/willzhang/spring-demo.git'
        }
    }
      
    stage('source build') {
      steps {
        container('maven') {
          sh 'mvn package'
        }
      }
    }

    stage('docker build') {
      steps {
        container('docker') {
          sh 'docker build -t ${REGISTRY}:${VERSION} .'
        }
      }
    }

    stage('docker publish') {
        steps {
            container('docker') {
                withDockerRegistry([credentialsId: "${REGISTRY_CREDENTIAL}", url: "https://registry.cn-shenzhen.aliyuncs.com"]) {
                    sh "docker push ${REGISTRY}:${VERSION}"
                }
            }
        }
    }

    stage('app deploy with kubectl') {
      steps {
        container('kubectl') {
            withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
            sh """
                mkdir -p /root/.kube/ && echo $KUBECONFIG >/root/.kube/config
                sed -i "s#spring-boot-demo-image#${REGISTRY}:${VERSION}#g" k8s/deployment.yaml
                kubectl apply -f k8s/deployment.yaml
                """
            }
        }
      }
    }

    stage('app deploy with helm') {
      steps {
        container('helm') {
            withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
            sh """
                mkdir -p /root/.kube/ && echo $KUBECONFIG >/root/.kube/config
                helm -n default upgrade --install spring-demo \
                  --set service.type=NodePort \
                  --set service.nodePort=30085 \
                  --set image.repository=${REGISTRY}:${VERSION} \
                  helm/
                """
            }
        }
      }
    }
  }
}
